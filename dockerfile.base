FROM tencentailab/hok_env:tlinux2.4-public

# python3.6
RUN rm /var/lib/rpm/__db* && rpm --rebuilddb && yum clean all && yum makecache fast && \
    yum update -y && \
    yum groupinstall -y "development tools" && \
    yum install -y zlib zlib-devel bzip2-devel openssl openssl-devel libffi-devel ncurses-devel xz-devel  python3-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel expat-devel && \
    rm /var/lib/rpm/__db* && yum clean all && rm -rf /var/cache/yum
 
RUN rm /var/lib/rpm/__db* && rpm --rebuilddb && yum clean all && yum makecache fast && \
    yum install -y \
    python36 \
    python3-pip \
    python36-devel && \
    rm /var/lib/rpm/__db* && yum clean all && rm -rf /var/cache/yum && \
    pip3 install --no-cache-dir --upgrade pip setuptools

# cuda 10.0
RUN NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \
curl -fsSL https://mirrors.tencent.com/nvidia-machine-learning/rhel7/x86_64/7fa2af80.pub | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \
    echo "$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA" | sha256sum -c --strict -

RUN echo -e '[cuda]\n\
name=cuda\n\
baseurl=https://mirrors.tencent.com/nvidia-cuda/rhel7/x86_64/\n\
enabled=1\n\
gpgcheck=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA' > /etc/yum.repos.d/cuda.repo

ENV CUDA_VERSION 10.0.130

ENV CUDA_PKG_VERSION 10-0-$CUDA_VERSION-1
# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN rm /var/lib/rpm/__db* && rpm --rebuilddb && yum clean all && yum makecache fast && \
yum install -y \
cuda-cudart-$CUDA_PKG_VERSION \
cuda-compat-10-0 \
&& \
    ln -s cuda-10.0 /usr/local/cuda && \
    rm /var/lib/rpm/__db* && yum clean all && rm -rf /var/cache/yum

# nvidia-docker 1.0
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/cuda/extras/CUPTI/lib64/" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.0 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=410,driver<411"

RUN yum --enablerepo=cuda clean metadata && \
        rm /var/lib/rpm/__db* && rpm --rebuilddb && yum clean all && yum makecache fast && \
        yum install -y \
        cuda-libraries-$CUDA_PKG_VERSION \
        cuda-nvtx-$CUDA_PKG_VERSION && \
    rm /var/lib/rpm/__db* && yum clean all && rm -rf /var/cache/yum

RUN rm /var/lib/rpm/__db* && rpm --rebuilddb && yum clean all && yum makecache fast && \
        yum install -y \
        cuda-nvml-dev-$CUDA_PKG_VERSION \
        cuda-command-line-tools-$CUDA_PKG_VERSION \
cuda-libraries-dev-$CUDA_PKG_VERSION \
        cuda-minimal-build-$CUDA_PKG_VERSION \
        && \
    yum-config-manager --disable cuda && \
    rm /var/lib/rpm/__db* && yum clean all && rm -rf /var/cache/yum

ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs

# cudnn
RUN echo -e '[nvidia-machine-learning]\n\
name=nvidia-machine-learning\n\
baseurl=https://mirrors.tencent.com/nvidia-machine-learning/rhel7/x86_64/\n\
enabled=1\n\
gpgcheck=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA' > /etc/yum.repos.d/nvidia-machine-learning.repo

RUN rm /var/lib/rpm/__db* && rpm --rebuilddb && yum clean all && yum makecache fast && \
        yum install -y libcudnn7-7.6.1.34-1.cuda10.0 libcudnn7-devel-7.6.1.34-1.cuda10.0 && \
    rm /var/lib/rpm/__db* && yum clean all && rm -rf /var/cache/yum

# nccl
RUN rm /var/lib/rpm/__db* && rpm --rebuilddb && yum clean all && yum makecache fast && \
        yum install -y libnccl-2.4.7-1+cuda10.0 libnccl-devel-2.4.7-1+cuda10.0 libnccl-static-2.4.7-1+cuda10.0 && \
    yum-config-manager --disable nvidia-machine-learning && \
    rm /var/lib/rpm/__db* && yum clean all && rm -rf /var/cache/yum

RUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf

# openmpi
RUN wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.7.tar.gz && tar xzvf openmpi-4.0.7.tar.gz && \
    cd openmpi-4.0.7 && \
    ./configure --prefix=/usr/local --enable-orterun-prefix-by-default && \
    make -j $(nproc) && \
    make install && \
    cd .. && \
    rm -r openmpi-4.0.7*

RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \
    chmod a+x /usr/local/bin/mpirun

RUN echo "hwloc_base_binding_policy = none" >> /usr/local/etc/openmpi-mca-params.conf && \
    echo "rmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf

ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONIOENCODING=UTF-8 LANG=C.UTF-8

# tensorflow
ENV TENSORFLOW_VERSION 1.14.0 

RUN pip3 install --no-cache-dir tensorflow-gpu==${TENSORFLOW_VERSION}

# horovod
RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    HOROVOD_NCCL_INCLUDE=/usr/include HOROVOD_NCCL_LIB=/usr/lib64 HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 pip3 install --no-cache-dir horovod==0.16.4
